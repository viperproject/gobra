// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

func nilTest() {
  var x interface{}
  assert x == nil
}

func intTest() {
  var a, b int32 = 42, 42
  var x interface{} = a
  c := x.(int32)
  assert c == 42
  assert x != 42
  assert x == b
  assert b == x

  //:: ExpectedOutput(assert_error:assertion_error)
  assert false
}

type pair struct{
  left, right int
}

func structTest() {
  a := pair{1, 2}
  var x interface{} = a
  b := x.(pair)
  assert b == pair{1, 2}

  b.left = 3
  c := x.(pair)
  assert c == pair{1, 2}
  assert x == pair{1,2}

  //:: ExpectedOutput(assert_error:assertion_error)
  assert false
}

func pointerTest() {

  var a, b *int = nil, nil
  var x interface{} = a
  c := x.(*int)
  assert c == nil
  assert x != nil
  assert x == b
  assert b == x

  //:: ExpectedOutput(assert_error:assertion_error)
  assert false
}


func definedTest() {
  a := pair{1, 2}
  b := struct{ left, right int }{1, 2}
  assert a == b
  var x interface{} = a
  var y interface{} = b
  assert x != y

  // not transitive
  assert x == a
  assert y == b

  c := x.(pair)
  //:: UnexpectedOutput(type_assertion_error:failed_type_assertion, /gobra/issue/134/)
  d := y.(struct{ left, right int })

  // //:: ExpectedOutput(assert_error:assertion_error)
  // assert false
}

func definedTestFailing1() {
  a := pair{1, 2}
  var x interface{} = a
  
  //:: ExpectedOutput(type_assertion_error:failed_type_assertion)
  q := x.(struct{ left, right int })
}

func definedTestFailing2() {
  a := struct{ left, right int }{1, 2}
  var x interface{} = a
  
  //:: ExpectedOutput(type_assertion_error:failed_type_assertion)
  q := x.(pair)
}
