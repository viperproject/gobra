// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures 0 <= a && a <= b && b <= len(s)
ensures forall n int :: 0 <= n && n < a ==> s[n] < mid
ensures forall n int :: a <= n && n < b ==> s[n] == mid
ensures forall n int :: b <= n && n < len(s) ==> mid < s[n]
func dutchflag (s []int, mid int) (ghost a int, ghost b int) {
  i := 0
  j := 0
  k := len(s)
  
  invariant 0 <= i && i <= j && j <= k && k <= len(s)
  invariant forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
  invariant forall n int :: 0 <= n && n < i ==> s[n] < mid
  invariant forall n int :: i <= n && n < j ==> s[n] == mid
  invariant forall n int :: k <= n && n < len(s) ==> mid < s[n]
  for (j < k) {
    if (s[j] < mid) {
      tmp := s[i]
      s[i] = s[j]
      s[j] = tmp
      i = i + 1
      j = j + 1
    } else if (s[j] > mid) {
      tmp := s[j]
      s[j] = s[k - 1]
      s[k - 1] = tmp
      k = k - 1
    } else {
      j = j + 1
    }
  }

  a := i
  b := j
  
  assert forall n int :: 0 <= n && n < a ==> s[n] < mid
  assert forall n int :: a <= n && n < b ==> s[n] == mid
  assert forall n int :: b <= n && n < len(s) ==> mid < s[n]
}
