// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// ported verified operations on dense and sparse matrices from Viper

package main

type DenseMatrix struct {
    values [][]int
}

pred denseMatrix(m *DenseMatrix) {
    acc(&m.values) &&
        (forall i int :: (0 <= i && i < len(m.values) ==> acc(&(m.values)[i]))) &&
        (forall i, j int :: (0 <= i && i < len(m.values) && 0 <= j && j < len((m.values)[i]) ==> acc(&(m.values)[i][j]))) &&
        (forall i int :: (0 <= i && i < len(m.values) ==> len((m.values)[i]) == len((m.values)[0])))
}

// number of rows
requires acc(denseMatrix(m), _)
decreases
pure func (m *DenseMatrix) lenX() int {
    return unfolding acc(denseMatrix(m), _) in len(m.values)
}

// number of columns
requires acc(denseMatrix(m), _)
requires m.lenX() != 0
decreases
pure func (m *DenseMatrix) lenY() int {
    return unfolding acc(denseMatrix(m), _) in len((m.values)[0])
}

requires acc(denseMatrix(m), _)
requires 0 <= i && i < m.lenX()
requires 0 <= j && j < m.lenY()
decreases
pure func (m *DenseMatrix) lookup(i, j int) (res int) {
    return unfolding acc(denseMatrix(m), _) in (m.values)[i][j]
}

requires denseMatrix(m) && m.lenX() != 0
ensures denseMatrix(m)
ensures m.lenX() == old(m.lenX()) && m.lenY() == old(m.lenY())
ensures forall i, j int :: (0 <= i && i < m.lenX() && 0 <= j && j < m.lenY() ==> m.lookup(i, j) == old(m.lookup(i, j)) * z)
decreases
func (m *DenseMatrix) multAlt(z int) {
    invariant denseMatrix(m)
    invariant 0 <= x && x <= m.lenX()
    invariant m.lenX() == old(m.lenX()) && m.lenY() == old(m.lenY())
    invariant forall i, j int :: (0 <= i && i < x && 0 <= j && j < m.lenY() ==> m.lookup(i, j) == old(m.lookup(i, j)) * z)
    invariant forall i, j int :: (x <= i && i < m.lenX() && 0 <= j && j < m.lenY() ==> m.lookup(i, j) == old(m.lookup(i, j)))
    decreases m.lenX() - x
    for x := 0; x < m.lenX(); x++ {
        invariant denseMatrix(m)
        invariant 0 <= x && x < m.lenX()
        invariant 0 <= y && y <= m.lenY()
        invariant m.lenX() == old(m.lenX()) && m.lenY() == old(m.lenY())
        invariant forall i, j int :: (0 <= i && i < x && 0 <= j && j < m.lenY() ==> m.lookup(i, j) == old(m.lookup(i, j)) * z)
        invariant forall j int :: (0 <= j && j < y ==> m.lookup(x, j) == old(m.lookup(x, j)) * z)
        invariant forall j int :: (y <= j && j < m.lenY() ==> m.lookup(x, j) == old(m.lookup(x, j)))
        invariant forall i, j int :: (x < i && i < m.lenX() && 0 <= j && j < m.lenY() ==> m.lookup(i, j) == old(m.lookup(i, j)))
        decreases m.lenY() - y
        for y := 0; y < m.lenY(); y++ {
            unfold denseMatrix(m)
            (m.values)[x][y] = (m.values)[x][y] * z
            fold denseMatrix(m)
        }
    }
}


type Entry struct {
    row int
    column int
    value int
}

type SparseMatrix struct {
    entry *Entry
    next *SparseMatrix
}

pred entry(e *Entry, r, c int) {
    acc(&e.row) && 0 <= e.row && e.row < r &&
    acc(&e.column) && 0 <= e.column && e.column < c &&
    acc(&e.value)
}

pred sparseMatrix(m *SparseMatrix, maxRow, maxColumn int) {
    m != nil ==>
        acc(&m.entry) && entry(m.entry, maxRow, maxColumn) &&
        acc(&m.next) && sparseMatrix(m.next, maxRow, maxColumn)
}

ghost
requires acc(sparseMatrix(m, maxRow, maxColumn), _)
decreases _
pure func LookupL(m *SparseMatrix, maxRow, maxColumn, i, j int) int {
    return unfolding acc(sparseMatrix(m, maxRow, maxColumn), _) in (m == nil ? 0 : unfolding acc(entry(m.entry, maxRow, maxColumn), _) in (m.entry.row == i && m.entry.column == j) ? m.entry.value : LookupL(m.next, maxRow, maxColumn, i, j))
}

requires sparseMatrix(m, maxRow, maxColumn)
ensures sparseMatrix(m, maxRow, maxColumn)
ensures forall i, j int :: (0 <= i && i < maxRow && 0 <= j && j < maxColumn) ==> LookupL(m, maxRow, maxColumn, i, j) == old(LookupL(m, maxRow, maxColumn, i, j)) * z
decreases sparseMatrix(m, maxRow, maxColumn)
func (m *SparseMatrix) mult(maxRow, maxColumn, z int) {
    unfold sparseMatrix(m, maxRow, maxColumn)
    if (m != nil) {
        m.next.mult(maxRow, maxColumn, z)
        unfold entry(m.entry, maxRow, maxColumn)
        m.entry.value = m.entry.value * z
        fold entry(m.entry, maxRow, maxColumn)
    }
    fold sparseMatrix(m, maxRow, maxColumn)
}

requires sparseMatrix(m, maxRow, maxColumn)
ensures sparseMatrix(m, maxColumn, maxRow)
ensures forall i, j int :: (0 <= i && i < maxRow && 0 <= j && j < maxColumn) ==> LookupL(m, maxColumn, maxRow, i, j) == old(LookupL(m, maxRow, maxColumn, j, i))
decreases sparseMatrix(m, maxRow, maxColumn)
func (m *SparseMatrix) transpose(maxRow, maxColumn int) {
    unfold sparseMatrix(m, maxRow, maxColumn)
    if (m != nil) {
        m.next.transpose(maxRow, maxColumn)
        unfold entry(m.entry, maxRow, maxColumn)
        tmp := m.entry.row
        m.entry.row = m.entry.column
        m.entry.column = tmp
        fold entry(m.entry, maxColumn, maxRow)
    }
    fold sparseMatrix(m, maxColumn, maxRow)
}

requires acc(denseMatrix(dm), 1/2) && dm.lenX() != 0
ensures acc(denseMatrix(dm), 1/2) && dm.lenX() != 0 && sparseMatrix(sm, dm.lenX(), dm.lenY())
ensures forall i, j int :: (0 <= i && i < dm.lenX() && 0 <= j && j < dm.lenY() ==> dm.lookup(i, j) == LookupL(sm, dm.lenX(), dm.lenY(), i, j))
decreases
func (dm *DenseMatrix)toSparse() (sm *SparseMatrix) {
    sm = nil
    lenX, lenY := dm.lenX(), dm.lenY()
    fold sparseMatrix(sm, lenX, lenY)
    invariant acc(denseMatrix(dm), 1/4) && sparseMatrix(sm, lenX, lenY)
    invariant 0 <= x && x <= lenX && lenX == dm.lenX() && lenY == dm.lenY()
    invariant forall i, j int :: (0 <= i && i < x && 0 <= j && j < lenY ==> dm.lookup(i, j) == LookupL(sm, lenX, lenY, i, j))
    decreases lenX - x
    for x := 0; x < lenX; x++ {
        invariant acc(denseMatrix(dm), 1/8) && sparseMatrix(sm, lenX, lenY)
        invariant 0 <= x && x < lenX && lenX == dm.lenX() && 0 <= y && y <= dm.lenY() && lenY == dm.lenY()
        invariant forall i, j int :: (0 <= i && i < x && 0 <= j && j < lenY ==> dm.lookup(i, j) == LookupL(sm, lenX, lenY, i, j))
        invariant forall j int :: (0 <= j && j < y ==> dm.lookup(x, j) == LookupL(sm, lenX, lenY, x, j))
        decreases lenY - y
        for y := 0; y < lenY; y++ {
            unfold acc(denseMatrix(dm), 1/8)
            e := &Entry{row: x, column: y, value: (dm.values)[x][y]}
            fold entry(e, lenX, lenY)
            sm = &SparseMatrix{entry: e, next: sm}
            fold sparseMatrix(sm, lenX, lenY)
            fold acc(denseMatrix(dm), 1/8)
        }
        // the following assert statement is necessary to preserve the outer loop's invariants:
        assert forall i, j int :: (0 <= i && i <= x && 0 <= j && j < dm.lenY() ==> dm.lookup(i, j) == LookupL(sm, lenX, lenY, i, j))
    }
    return
}
