// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// this testcase checks that a ghost value of a type implementing an interface
// cannot be passed to a non-ghost context

package ImplementsInterfaceFail01

ghost type intPair domain {
    func fst(intPair) int
    func snd(intPair) int
    func pair(int, int) intPair

    axiom {
      forall p intPair :: {fst(p)}{snd(p)} p == pair(fst(p),snd(p))
    } // pair

    axiom {
      forall l, r int :: {pair(l,r)} l == fst(pair(l,r)) && r == snd(pair(l,r))
    }
}

// the following clause should be permitted by the type-checker:
intPair implements any

func test() (res bool) {
    x := pair(1,2)
    //:: ExpectedOutput(type_error)
    tmp := equalImpure(x, x) // cannot assign ghost argument to a non-ghost parameter
    assert equalPure(x, x) // fine as we allow calling pure functions with ghost arguments by implicitly treating the callee as being ghost
    //:: ExpectedOutput(type_error)
    res = equalPure(x, x) // cannot assign implicitly ghost result to a non-ghost variable
    return
}

decreases
requires isComparable(a)
func equalImpure(a, b any) bool {
    return a == b
}

decreases
requires isComparable(a)
pure func equalPure(a, b any) bool {
    return a == b
}
