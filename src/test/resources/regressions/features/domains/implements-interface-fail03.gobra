// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// this testcase checks that a domain cannot implement an interface containing actual functions by defining actual
// methods (complementing `implements-interface-simple02.gobra`).

package ImplementsInterfaceFail03

ghost type intPair domain {
    func fst(intPair) int
    func snd(intPair) int
    func pair(int, int) intPair

    axiom {
      forall p intPair :: {fst(p)}{snd(p)} p == pair(fst(p),snd(p))
    } // pair

    axiom {
      forall l, r int :: {pair(l,r)} l == fst(pair(l,r)) && r == snd(pair(l,r))
    }
}

type Equality interface {
    pure hash() int

    isEqual(other Equality) bool
}

// the following clause should be permitted by the type-checker as intPair implements the interface:
intPair implements Equality

decreases
//:: ExpectedOutput(type_error)
pure func (i intPair) hash() int { // receiver cannot be ghost
    return 42 // best implementation of a hash function
}

decreases
//:: ExpectedOutput(type_error)
func (i intPair) isEqual(other Equality) bool { // receiver cannot be ghost & ghost result cannot be assigned to actual result
    if typeOf(other) == intPair {
        return fst(i) == fst(other.(intPair)) && snd(i) == snd(other.(intPair))
    }
    return false
}

func test() {
    ghost var x Equality
    x = pair(1,2)
    assert x.hash() == 42
}
