// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in https://golang.org/LICENSE

// This package is imported implicitly in every other package.
// Because Go does not allow cyclic import relations, files in
// this package cannot have imports.

package builtin

type any = interface{}

type error interface {
	pred ErrorMem()

	ghost
	requires  acc(ErrorMem(), _)
	decreases Size()
	pure IsDuplicableMem() bool

	ghost
	preserves ErrorMem()
	ensures   IsDuplicableMem() ==> ErrorMem()
	ensures   Size() == old(Size())
	decreases Size()
	Duplicate()

	preserves ErrorMem()
	decreases Size()
	ensures   Size() == old(Size())
	Error() string

	// This function indicates the size of the longest chain of nested
	// errors, and restricts it to be finite. Although this sounds limiting,
	// it allows one to write recursive implementations of Error(), where
	// the generated error message is, in part, obtained from nested errors,
	// and to prove that these functions are terminating.
	ghost
	requires acc(ErrorMem(), _)
	ensures  0 <= res
	pure Size() (res int)
}

// The panic built-in function stops normal execution of the current
// goroutine. Because Gobra does not support defer statements yet,
// a panic is modeled as an unrecoverable error in the program and
// a correct program must never call it.
requires false
func panic(v interface{})
