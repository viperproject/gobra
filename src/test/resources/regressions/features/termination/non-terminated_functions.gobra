// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package termination

decreases x
func f_e(x int) int {
  if x > 2 {
  
    //:: ExpectedOutput(method_termination_error)
    return f_e(f_e(0)+3)
  } else {
    return 0
  }
}

//termination checking for mutual recursion
decreases x
func g(x int) int {
 if x > 1 {
   //:: ExpectedOutput(method_termination_error)
   return h(g(x-1)-1)
 } else {
   return 1
 }
}

//:: ExpectedOutput(postcondition_error)
ensures result == 1
decreases x
func h(x int) (result int) {
  if x > 1 {
    return g(h(x-1)-1)
  } else {
    return 1
  }
}

ghost
decreases n
func simple(n int) {

  //:: ExpectedOutput(method_termination_error)
  simple(n)
}

ghost
requires x >= 0
decreases x
func is_even(x int) bool {
  if x == 0 {
    return true
  } else {
   
    //:: ExpectedOutput(method_termination_error)
    return is_odd(x)
  }
}

ghost
requires y >= 0
decreases y
func is_odd(y int) bool {
  if y == 0 {
    return false
  } else {
    return is_even(y-1)
  }
}

ghost
decreases x if 1 <= x
decreases _ if x <= -1
decreases *
func sign(x int) int {
  if x == 0 {
    return sign(x)
  } else {
    if 1 < x {
    
      //:: ExpectedOutput(method_termination_error)
      return sign(x)
    } else { 
      if x < -1 {
        return sign(x + 1)
      } else {
        return x
      }
    }
  }
}

ghost
decreases n
func factorial(n int) int {
  if n == 0 {
    return 1
  } else {
  
    //:: ExpectedOutput(method_termination_error)
    return factorial(n-1)
  }
}

ghost
decreases i
func f3(i int) int {

  //:: ExpectedOutput(method_termination_error)
  if true || f3(i) != 1 {
    return 1
  } else {
    return f3(i)
  }
}

ghost
decreases i
func f4(i int) int {

  //:: ExpectedOutput(method_termination_error)
  if false && f4(i) != 1 {
    f4(i)
  } else {
    return 1
  }
}

ghost
requires n >= 0
decreases
pure func factorial2(n int) int {

   //:: ExpectedOutput(function_termination_error)
   return n == 0 ? 1 :  1 * factorial2(n-1)
}


decreases n
pure func infinite(n int) int {

  //:: ExpectedOutput(function_termination_error)
  return infinite(n)
}




