// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

func main() {
    res := absValSwitch(-1)
    assert res == 1
}

ensures ret >= 0
ensures i < 0 ==> ret == -1 * i
func absValSwitch(i int) (ret int) {
    // tests switch without statement and expression
    switch {
    case i < 0:
        ret = -1 * i
    case i > 0:
        ret = i
    default:
        ret = 0
    }
    return
}

ensures (i == 0 || i == 1 || i == 2) ==> ret == 0
ensures (i == 3) ==> ret == 2
ensures i > 3 ==> ret == 3
func switchTest(i int)(ret int) {
    switch i {
    case 0, 1, 2:
        // test multiple expressions in case
        ret = 0
    case 2:
        // tests order of case statements (this assignment should never be reached)
        ret = 1
    case 3:
        // tests single value
        ret = 2
    default:
        // tests default case
        ret = 3
    }
    return ret
}

ensures i % 2 == 1 ==> ret == true
ensures i % 2 == 0 ==> ret == false
func isOdd(i int)(ret bool) {
    // tests statement before expression in the switch statement
    switch i++; i % 2 {
    case 0:
        ret = true
    default:
        ret = false
    }
    return
}

func emptySwitch(){
    // tests that gobra can handle empty statements
    switch {}
}

func onlyDefault(i int)(ret int){
    switch i {
    default: ret = 1
    }
    return ret
}

ensures i == 0 ==> ret == 0
ensures i == 1 ==> ret == 2
ensures i != 0 && i != 1 ==> ret == 1
func testDefaultNotLast(i int)(ret int) {
    // tests support for default case not being the last one
    switch i {
    case 0:
        ret = 0
    default:
        ret = 1
    case 1:
        ret = 2
    }
    return
}

ensures i == 0 ==> ret == 0
func testMultipleMatch(i int)(ret int) {
    switch i {
    case 0:
        ret = 0
    case 0:
        ret = 1
    case 0:
        ret = 2
    case 0:
        ret = 3
    default:
        ret = 4
    }
}
