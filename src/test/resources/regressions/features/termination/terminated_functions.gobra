// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package termination

ghost
requires n >= 0
decreases n
func factorial(n int) int {
  if n == 0 {
    return 1
  } else {
    return factorial(n-1)
  }
}

ghost
requires m >= 0
requires n >= 0
ensures result >= 0
decreases m,n
func ack(m int, n int) (result int) {
  if m == 0 {
    return n+1 
  } else {
    if n == 0 {
      ack(m-1, 1)
    } else {   
      ack(m-1, ack(m, n - 1))
    }
  }
}

ghost
decreases
func facade(i int) int {
  return compute(i, 0)
}

decreases
func compute(i int, j int) int {
  return i + j
}

ghost
requires 1 <= n
decreases _
func collatz(n int) int {
  if n == 1 {
    return n
  } else {
    if n % 2 == 0 {
      return collatz(n / 2)
    } else {
      return collatz(3 * n + 1)
    }
  }
}

ghost
decreases *
func nonterm() int {
 return 1 + nonterm()
}

ghost
requires x >= 0
decreases x
func is_even(x int) bool {
  if x == 0 {
    return true
  } else {
    return is_odd(x-1)
  }
}

ghost
requires y >= 0
decreases y
func is_odd(y int) bool {
  if y == 0 {
    return false
  } else {
    return is_even(y-1)
  }
}

ghost
decreases x if 1 <= x
decreases _ if x <= -1
decreases *
func sign(x int) int {
  if x == 0 {
    return sign(x)
  } else {
    if 1<x { 
      return sign(x - 1)
    } else {
      if x < -1 {
        return sign(x + 1)   
      } else {
        return x
      }
    }
  }
}

ghost
decreases *
func caller(x int) int {
 return sign(x)
}

ghost
requires 0 <= n
ensures res == n * (n + 1) / 2
decreases
func sum(n int) (res int) {
  res := 0
  invariant i <= (n + 1)
  invariant res == (i - 1) * i / 2
  decreases n-i
  for i:=0; i<=n; i++ {
    res = res + i
  }
  return res
}

ghost
decreases s
func sum2(ghost s seq[int]) int {
  ghost res := 0
  invariant i >= 0
  invariant len(s) >= i
  decreases len(s)-i
  for i := 0; i < len(s); i++ {
    res += s[i]
  }
}

ghost
decreases n if n >= 0
decreases _ if n < 0
func test2(n int) int {
  if n > 0 {
    return test2(n-1)
  } else {
    return n
  }
}

ghost
requires n >= 0
decreases n
func fib(n int) int {
  if n == 0 {
    return 0
  } else {
    if n == 1 {
      return 1
    } else {
      return fib(n-1) + fib(n-2)
    }
  }
}

ghost
decreases x + 10
func fun1(x int) int {
  if x > -10 {
    fun1(x-1)
  } else {
    return 6
  }
}

ghost
decreases x + x
func fun2(x int) int {
  if x > 5 {
    if x > 10 {
      return fun2(x-2)
    } else {
      return fun2(x-1)
    }
  } else {
    return 1
  }
}

ghost
requires x > 0 && y > 0
decreases x
func fun3(x int, y int) int {
  if y >= x {
    return 8
  } else {
    return fun3(y, y)
  }
}

ghost
decreases x, y
func fun4(x int, y int) int {
  if x < 5 || y<8  {
    return 10
  } else {
    return fun4(x-2, y-3)
  }
}

ghost
decreases -x + 12
func fun5(x int) int {
  if x < 10 {
    return fun5(x+2)
  } else {
    return 7
  }
}

ghost
requires i >= 0
decreases i
func f1(i int) int {
  if i<10 {
    return 1
  } else {
    if f1(i-1) < 4 || (f1(i-3) < 6) {
      return 1
    } else {
      f1(i-1)
    }
  }
}

ghost
requires n >= 0
func factorial4(n int) int {
  if n == 0 {
    return 1
  } else {
    return factorial4(n)
  }
}
