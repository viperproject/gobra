// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg


preserves acc(x)
requires len(x) > 0
ensures forall i int :: 0 <= i && i < len(x) ==> max >= x[i]
decreases
func foo(x []uint) (max uint) {
	max = x[0]
	invariant acc(x)
	invariant 0 <= i && i <= len(x)
	invariant forall k int :: 0 <= k && k < i ==> max >= x[k]
	decreases len(x) - i
	for i, j := range x {
		if j > max {
			max = j
		}
	}
}

func foo_arr() {
	x := [4]uint{1, 2, 3, 4}
	max := x[0]
	invariant 0 <= i && i <= len(x)
	invariant forall k int :: 0 <= k && k < i ==> max >= x[k]
	for i, j := range x {
		if j > max {
			max = j
		}
	}
	assert forall i int :: 0 <= i && i < len(x) ==> max >= x[i]
}

decreases
func bar() {
	x := []uint{1, 2, 3}
	m := foo(x)
	assert forall i int :: 0 <= i && i < len(x) ==> m >= x[i]
  }
  
func bar2() {
	x := []int{1, 2, 3, 4, 5}
	sum := 0
	invariant acc(x)
	invariant 0 <= i && i <= len(x)
	invariant sum == i * (i - 1) / 2
	decreases len(x) - i
	for i := range x {
		sum += i
	}
	assert sum == len(x) * (len(x) - 1) / 2
}

func foo2() {
	x := []int{1, 2, 3, 4, 5}
	invariant acc(x)
	for _, j := range x {
	}
	invariant acc(x)
	for i, _ := range x {
	}
	invariant acc(x)
	for _, _ := range x {
	}
	invariant acc(x)
	for _ := range x {
	}
}

func foo3() {
	x := [0]int{}
	for i, j := range x {
	}
	y := []int{}
	for i, j := range x {
	}
	for i,j := range x {
		continue
		break
	}
}
