// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

type TwoStack struct { Curr, prev int }

pred (s *TwoStack) Mem() { acc(&s.prev) }

requires s.Mem()
pure func (s *TwoStack) GetPrev() int {
	return unfolding s.Mem() in s.prev
}

pure func GetPrevValue(s TwoStack) int { return s.prev }

ensures acc(&result.Curr) && result.Mem()
ensures result.Curr == value.Curr && 
	result.GetPrev() == GetPrevValue(value)
construct &TwoStack()  {
	fold result.Mem() //proof body
}

requires  acc(&this.Curr) && this.Mem()
pure deref &TwoStack() {
	return unfolding this.Mem() in *this
}

requires  acc(&this.Curr) && this.Mem()
ensures  acc(&this.Curr) && this.Mem()
ensures *this == value
assign &TwoStack(value TwoStack) {
	unfold this.Mem()
	*this = value
	fold this.Mem()
}

requires acc(&s.Curr) && s.Mem()
ensures acc(&s.Curr) && s.Mem()
ensures old(s.Curr) == s.GetPrev()
ensures s.Curr == n
private {
	requires acc(s)
	ensures acc(s)
	ensures old(s.Curr) == s.prev
	ensures s.Curr == n
	proof {
		unfold s.Mem()
		s.Push(n)
		fold s.Mem()
	}
}
func (s *TwoStack) Push(n int) {
    s.prev = s.Curr
    s.Curr = n
}

requires acc(&s.Curr) && s.Mem()
ensures acc(&s.Curr) && s.Mem()
ensures s.Curr == s.GetPrev()
ensures s.GetPrev() == old(s.GetPrev())
private {
	requires acc(s)
	ensures acc(s)
	ensures s.Curr == s.prev
	ensures s.prev == old(s.prev)
	proof {
		unfold s.Mem()
		s.Pop()
		fold s.Mem()
	}
}
func (s *TwoStack) Pop() {
    s.Curr = s.prev
}

