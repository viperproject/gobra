// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package tutorial

requires forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
ensures forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
ensures forall k int :: 0 <= k && k < len(s) ==> s[k] == old(s[k]) + n
func addToSlice(s []int, n int) {
	invariant 0 <= i && i <= len(s)
	invariant forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
	invariant forall k int :: i <= k && k < len(s) ==> s[k] == old(s[k])
	invariant forall k int :: 0 <= k && k < i ==> s[k] == old(s[k]) + n
	for i := 0; i < len(s); i += 1 {
		s[i] = s[i] + n
	}
}

func addToSliceClient() {
	s := make([]int, 10)
	assert forall i int :: 0 <= i && i < 10 ==> s[i] == 0
	addToSlice(s, 10)
	assert forall i int :: 0 <= i && i < 10 ==> s[i] == 10
}