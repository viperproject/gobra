// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg

decreases
pure func parent (i int) int {
  return (i - 1) / 2
}

decreases
pure func leftChild (i int) int {
  return 2 * i + 1
}

decreases
pure func rightChild (i int) int {
  return 2 * i + 2
}

ghost
decreases _
pure func descendant (p int, q int) bool {
  return p == q || (p <= q && descendant(p, parent(q)))
}

ghost
requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n], _)
requires 0 <= start && start <= end && end < len(s)
decreases
pure func heap(s []int, start int, end int) bool {
  return forall i int :: start <= parent(i) && i <= end ==> s[i] <= s[parent(i)]
}

ghost
requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n], _)
requires 0 <= start && start <= end && end < len(s)
decreases
pure func almostHeap(s []int, start, end, wrong int) bool {
  return forall j int :: start <= j && j <= end && start <= parent(j) && wrong != parent(j) ==>
    s[j] <= s[parent(j)]
}

ghost
requires 0 <= pos && pos <= end
requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n], _)
requires end < len(s)
decreases
pure func validParent(s []int, end, pos int) bool {
  return (leftChild(pos) <= end ==> s[leftChild(pos)] <= s[pos]) && (rightChild(pos) <= end ==>  s[rightChild(pos)] <= s[pos])
}

ghost
requires forall j int :: 0 <= j && j < len(xs) ==> acc(&xs[j], _)
requires 0 <= p && p <= q && q <= end && end < len(xs)
requires heap(xs, p, end)
requires descendant(p, q)
ensures res && xs[q] <= xs[p]
decreases _
pure func lemma_descendant_order (xs []int, p int, q int, end int) (res bool) {
  return (p < q ==> descendant(p, parent(q)) && lemma_descendant_order(xs, p, parent(q), end))
}

ghost
requires 0 <= n
ensures res && descendant(0, n)
decreases n
pure func lemma_descendant_zero (n int) (res bool) {
  return (0 < n ==> lemma_descendant_zero(parent(n)))
}

ghost
requires forall j int :: 0 <= j && j < len(xs) ==> acc(&xs[j], _)
requires 0 <= i && i <= end && end < len(xs)
requires heap(xs, 0, end)
ensures res && xs[i] <= xs[0]
decreases
pure func lemma_heap_top (xs []int, i int, end int) (res bool) {
  return (lemma_descendant_zero(i) && lemma_descendant_order(xs, 0, i, end))
}

ghost
requires 0 <= end && end < len(s)
requires forall j int :: (0 <= j && j < len(s)) ==> acc(&s[j], _)
requires heap(s, 0, end)
ensures res
decreases
pure func lemma_heap_top_all (s []int, end int) (res bool) {
  return (forall i int :: 0 <= i && i <= end && lemma_heap_top(s, i, end) ==> s[i] <= s[0])
}

requires acc(&s[i])
requires i != j ==> acc(&s[j])
ensures acc(&s[i])
ensures i != j ==> acc(&s[j])
ensures old(s[i]) == s[j]
ensures old(s[j]) == s[i]
decreases
func swap(s []int, i, j int) {
    tmp := s[i]
    s[i] = s[j]
    s[j] = tmp
}

requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures forall a, b int :: 0 <= a && a <= b && b < len(s) ==> s[a] <= s[b]
decreases
func heapsort (s []int) {
  heapify(s)
  
  end := len(s) - 1
  
  invariant -1 <= end && end < len(s)
  invariant 0 < len(s) ==> 0 <= end
  invariant forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
  invariant 0 < len(s) ==> heap(s, 0, end)
  invariant forall a, b int :: end < a && a <= b && b < len(s) ==> s[a] <= s[b]
  invariant end+1 < len(s) ==> forall n int :: 0 <= n && n <= end ==> s[n] <= s[end+1]
  decreases end
  for 0 < end {
    assert lemma_heap_top_all(s, end)
    swap(s, 0, end)
    end = end - 1
    siftDown(s, 0, end, true)
  }
}

requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures forall n int :: 0 <= parent(n) && n < len(s) ==> s[n] <= s[parent(n)]
decreases
func heapify (s []int) {
  start := parent(len(s) - 1)
  
  invariant -1 <= start && start <= parent(len(s) - 1)
  invariant forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
  invariant forall n int :: start + 1 <= parent(n) && n < len(s) ==> s[n] <= s[parent(n)]
  decreases start
  for 0 <= start {
    siftDown(s, start, len(s)-1, false)
    start = start - 1
  }
}

requires 0 <= start && start <= end
requires end < len(s)
requires forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
requires start < end ==> heap(s, start+1, end)
requires preserve ==> forall i int :: 0 <= i && i <= end && end+1 < len(s) ==> s[i] <= s[end+1]
ensures forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
ensures heap(s, start, end)
ensures forall n int :: end < n && n < len(s) ==> s[n] == old(s[n])
ensures preserve ==> forall i int :: 0 <= i && i <= end && end+1 < len(s) ==> s[i] <= s[end+1]
decreases
func siftDown (s []int, start int, end int, ghost preserve bool) {
  root := start
  stop := false
  
  invariant start <= root && root <= end
  invariant forall n int :: 0 <= n && n < len(s) ==> acc(&s[n])
  invariant almostHeap(s, start, end, root)
  invariant forall n int :: start <= parent(root) && root == parent(n) && n <= end ==> s[n] <= s[parent(root)]
  invariant stop ==> validParent(s, end, root)
  invariant forall n int :: end < n && n < len(s) ==> s[n] == old(s[n])
  invariant preserve ==> forall i int :: 0 <= i && i <= end && end+1 < len(s) ==> s[i] <= s[end+1]
  
  //:: ExpectedOutput(Loop_termination_error)
  decreases
  for !stop && leftChild(root) <= end {
    child := leftChild(root)
    if (child + 1 <= end && s[child] < s[child + 1]) {
      child = child + 1
    }
    if (s[root] < s[child]) {
      swap(s, root, child)
      root = child
    } else {
      stop = true
    }
  }
}
