// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in https://golang.org/LICENSE

// Signatures for the public declarations in file
// https://github.com/golang/go/blob/master/src/net/net.go

package net

import "time"

// Addr represents a network end point address.
type Addr interface {
	pred mem()

	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	Network(ghost p perm) string

	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	String(ghost p perm) string
}

// Conn is a generic stream-oriented network connection.
// Multiple goroutines may invoke methods on a Conn simultaneously.
type Conn interface {
	pred mem()

	// Read reads data from the connection.
	requires mem()
	requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
	ensures mem()
	ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
	Read(b []byte) (n int, err error)

	// Write writes data to the connection.
	requires p > 0
	requires mem()
	requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], p)
	ensures mem()
	ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], p)
	Write(b []byte, ghost p perm) (n int, err error)

	// Close closes the connection.
	// Any blocked Read or Write operations will be unblocked and return errors.
	requires mem()
	ensures mem()
	Close() error

	// LocalAddr returns the local network address.
	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	LocalAddr(ghost p perm) Addr

	// RemoteAddr returns the remote network address.
	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	RemoteAddr(ghost p perm) Addr

	// SetDeadline sets the read and write deadlines associated
	// with the connection.
	requires mem()
	ensures mem()
	SetDeadline(t time.Time) error

	// SetReadDeadline sets the deadline for future Read calls
	// and any currently-blocked Read call.
	requires mem()
	ensures mem()
	SetReadDeadline(t time.Time) error

	// SetWriteDeadline sets the deadline for future Write calls
	// and any currently-blocked Write call.
	requires mem()
	ensures mem()
	SetWriteDeadline(t time.Time) error
}

// PacketConn is a generic packet-oriented network connection.
// Multiple goroutines may invoke methods on a PacketConn simultaneously.
type PacketConn interface {
	pred mem()

	requires mem()
	requires forall i int :: 0 <= i && i < len(p) ==> acc(&p[i])
	ensures mem()
	ensures forall i int :: 0 <= i && i < len(p) ==> acc(&p[i])
	ensures 0 <= n && n <= len(p)
	ReadFrom(p []byte) (n int, addr Addr, err error)

	requires permission > 0
	requires mem()
	requires forall i int :: 0 <= i && i < len(p) ==> acc(&p[i], permission)
	ensures mem()
	ensures forall i int :: 0 <= i && i < len(p) ==> acc(&p[i], permission)
	WriteTo(p []byte, addr Addr, ghost permission perm) (n int, err error)

	requires mem()
	ensures mem()
	Close() error

	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	LocalAddr(ghost p perm) Addr

	requires mem()
	ensures mem()
	SetDeadline(t time.Time) error

	requires mem()
	ensures mem()
	SetReadDeadline(t time.Time) error

	requires mem()
	ensures mem()
	SetWriteDeadline(t time.Time) error
}

// A Listener is a generic network listener for stream-oriented protocols.
// Multiple goroutines may invoke methods on a Listener simultaneously.
type Listener interface {
	pred mem()

	// Accept waits for and returns the next connection to the listener.
	requires mem()
	ensures mem()
	Accept() (Conn, error)

	// Close closes the listener.
	// Any blocked Accept operations will be unblocked and return errors.
	requires mem()
	ensures mem()
	Close() error

	// Addr returns the listener's network address.
	// Addr() Addr // (joao): error, check issue 229
}

// An Error represents a network error.
type Error interface {
	pred mem()

	// error // (joao) support for embeddings is buggy

	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	Timeout(ghost p perm) bool   // Is the error a timeout?

	requires p > 0
	requires acc(mem(), p)
	ensures acc(mem(), p)
	Temporary(ghost p perm) bool // Is the error temporary?
}

// Various errors contained in OpError.
// (joao): global variables and errors package not supported
/*
var (
	ErrWriteToConnected = errors.New("use of WriteTo with pre-connected connection")
)*/

// OpError is the error type usually returned by functions in the net
// package. It describes the operation, network type, and address of
// an error.
type OpError struct {
	Op string
	Net string
	Source Addr
	// Addr Addr // (joao): error, check issue 229
	Err error
}

pred (op *OpError) mem() {
	acc(op)
}

requires acc(e.mem(), _)
pure func (e *OpError) Unwrap() error { return unfolding acc(e.mem(), _) in e.Err }

requires acc(e.mem())
ensures acc(e.mem())
func (e *OpError) Error() string 

requires p > 0
requires acc(e.mem(), p)
ensures acc(e.mem(), p)
func (e *OpError) Timeout(ghost p perm) bool /*{
	if ne, ok := e.Err.(*os.SyscallError); ok {
		t, ok := ne.Err.(timeout)
		return ok && t.Timeout()
	}
	t, ok := e.Err.(timeout)
	return ok && t.Timeout()
}*/

requires p > 0
requires acc(e.mem(), p)
ensures acc(e.mem(), p)
func (e *OpError) Temporary(ghost p perm) bool /*{
	if e.Op == "accept" && isConnError(e.Err) {
		return true
	}

	if ne, ok := e.Err.(*os.SyscallError); ok {
		t, ok := ne.Err.(temporary)
		return ok && t.Temporary()
	}
	t, ok := e.Err.(temporary)
	return ok && t.Temporary()
}*/

(*OpError) implements Error {
	(e *OpError) Timeout(ghost p perm) bool {
		return e.Timeout(p)
	}

	(e *OpError) Temporary(ghost p perm) bool {
		return e.Temporary(p)
	}
}

// A ParseError is the error type of literal network address parsers.
type ParseError struct {
	Type string
	Text string
}

requires acc(e)
ensures acc(e)
func (e *ParseError) Error() string

type AddrError struct {
	Err  string
	Addr string
}

pred (e *AddrError) mem() { acc(e) }

requires p > 0
requires e != nil ==> acc(e, p)
ensures e == nil ==> ret == "<nil>"
ensures e != nil ==> acc(e, p)
ensures (e != nil && e.Addr != "") ==> ret == "address " + e.Addr + ": " + e.Err
ensures (e != nil && e.Addr == "") ==> ret == e.Err
func (e *AddrError) Error(ghost p perm) (ret string) {
	if e == nil {
		return "<nil>"
	}
	s := e.Err
	if e.Addr != "" {
		s = "address " + e.Addr + ": " + s
	}
	return s
}

// TODO: if the method is annotated with pure, then the implementation proof fails
// because the "pure" annotation of the interface and implementation do not match
requires 0 <= p
requires acc(e.mem(), p)
ensures acc(e.mem(), p)
ensures !res
/* pure */ func (e *AddrError) Timeout(ghost p perm) (res bool)   { return false }

requires 0 <= p
requires acc(e.mem(), p)
ensures acc(e.mem(), p)
ensures !res
/* pure */ func (e *AddrError) Temporary(ghost p perm) (res bool) { return false }

(*AddrError) implements Error {
	(e *AddrError) Timeout(ghost p perm) bool {
		return e.Timeout(p)
	}

	(e *AddrError) Temporary(ghost p perm) bool {
		return e.Temporary(p)
	}
}

type UnknownNetworkError string

func (e UnknownNetworkError) Error() string   // { return "unknown network " + string(e) }
ensures !res
pure func (e UnknownNetworkError) Timeout() (res bool)   { return false }
ensures !res
pure func (e UnknownNetworkError) Temporary() (res bool) { return false }

type InvalidAddrError string

// func (e InvalidAddrError) Error() string   { return string(e) }
func (e InvalidAddrError) Timeout() (res bool)   { return false }
func (e InvalidAddrError) Temporary() (res bool) { return false }

// DNSError represents a DNS lookup error.
type DNSError struct {
	Err         string
	Name        string
	Server      string
	IsTimeout   bool
	IsTemporary bool
	IsNotFound  bool
}

pred (e *DNSError) mem() { acc(e) }

requires p > 0
requires e != nil ==> acc(e, p)
ensures e != nil ==> acc(e, p)
func (e *DNSError) Error(ghost p perm) string {
	if e == nil {
		return "<nil>"
	}
	s := "lookup " + e.Name
	if e.Server != "" {
		s += " on " + e.Server
	}
	s += ": " + e.Err
	return s
}

// Timeout reports whether the DNS lookup is known to have timed out.
requires p > 0
requires acc(e.mem(), p)
ensures acc(e.mem(), p)
ensures unfolding acc(e.mem(), _) in res == e.IsTimeout
/* pure */ func (e *DNSError) Timeout(ghost p perm) (res bool) { return unfolding acc(e.mem(), _) in e.IsTimeout }

// Temporary reports whether the DNS error is known to be temporary.
requires p > 0
requires acc(e.mem(), p)
ensures acc(e.mem(), p)
ensures unfolding acc(e.mem(), _) in res == e.IsTimeout || e.IsTemporary
/* pure */ func (e *DNSError) Temporary(ghost p perm) (res bool) { return unfolding acc(e.mem(), _) in e.IsTimeout || e.IsTemporary }

(*DNSError) implements Error {
	(e *DNSError) Timeout(ghost p perm) bool {
		return e.Timeout(p)
	}

	(e *DNSError) Temporary(ghost p perm) bool {
		return e.Temporary(p)
	}
}

// Buffers contains zero or more runs of bytes to write.
type Buffers [][]byte

// TODO: add support for io.Writer
/*
func (v *Buffers) WriteTo(w io.Writer) (n int64, err error) {
	if wv, ok := w.(buffersWriter); ok {
		return wv.writeBuffers(v)
	}
	for _, b := range *v {
		nb, err := w.Write(b)
		n += int64(nb)
		if err != nil {
			v.consume(n)
			return n, err
		}
	}
	v.consume(n)
	return n, nil
}
*/

/*
func (v *Buffers) Read(p []byte) (n int, err error) {
	for len(p) > 0 && len(*v) > 0 {
		n0 := copy(p, (*v)[0])
		v.consume(int64(n0))
		p = p[n0:]
		n += n0
	}
	if len(*v) == 0 {
		err = io.EOF
	}
	return
}

func (v *Buffers) consume(n int64) {
	for len(*v) > 0 {
		ln0 := int64(len((*v)[0]))
		if ln0 > n {
			(*v)[0] = (*v)[0][n:]
			return
		}
		n -= ln0
		*v = (*v)[1:]
	}
}
*/