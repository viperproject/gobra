// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in https://golang.org/LICENSE

// Signatures for the public declarations in file
// https://github.com/golang/go/blob/master/src/net/udpsock.go

package net

import (
// TODO(Gobra): imported packages not supported 
//	"context"
//	"internal/itoa"
//	"syscall"
)

// BUG(mikio): On Plan 9, the ReadMsgUDP and
// WriteMsgUDP methods of UDPConn are not implemented.

// BUG(mikio): On Windows, the File method of UDPConn is not
// implemented.

// BUG(mikio): On JS, methods and functions related to UDPConn are not
// implemented.

// UDPAddr represents the address of a UDP end point.
type UDPAddr struct {
	IP   IP
	Port int
	Zone string // IPv6 scoped addressing zone
}

pred (a *UDPAddr) mem() {
    acc(a)
}

/* (joao) Causes errors for importing packages (e.g. scion.gobra in verifiedScion)
(*UDPAddr) implements Addr {
	(e *UDPAddr) Network() string {
		return e.Network()
	}

	(e *UDPAddr) String() string {
		return e.String()
	}
}
*/

// Network returns the address's network name, "udp".
ensures res == "udp"
func (a *UDPAddr) Network() (res string) { return "udp" }

requires acc(a.mem(), 1/1000)
ensures acc(a.mem(), 1/1000)
func (a *UDPAddr) String() string // {
//	if a == nil {
//		return "<nil>"
//	}
//	ip := ipEmptyString(a.IP)
//	if a.Zone != "" {
//		return JoinHostPort(ip+"%"+a.Zone, itoa.Itoa(a.Port))
//	}
//	return JoinHostPort(ip, itoa.Itoa(a.Port))
//}

//func (a *UDPAddr) isWildcard() bool {
//	if a == nil || a.IP == nil {
//		return true
//	}
//	return a.IP.IsUnspecified()
//}

//func (a *UDPAddr) opAddr() Addr {
//	if a == nil {
//		return nil
//	}
//	return a
//}

// ResolveUDPAddr returns an address of UDP end point.
//
// The network must be a UDP network name.
//func ResolveUDPAddr(network, address string) (*UDPAddr, error) {
//	switch network {
//	case "udp", "udp4", "udp6":
//	case "": // a hint wildcard for Go 1.0 undocumented behavior
//		network = "udp"
//	default:
//		return nil, UnknownNetworkError(network)
//	}
//	addrs, err := DefaultResolver.internetAddrList(context.Background(), network, address)
//	if err != nil {
//		return nil, err
//	}
//	return addrs.forResolve(network, address).(*UDPAddr), nil
//}

// UDPConn is the implementation of the Conn and PacketConn interfaces
// for UDP network connections.
type UDPConn struct {
// TODO(Gobra): embedded fields not supported
//	conn
}

pred (u *UDPConn) mem() {
    acc(u)
}

// SyscallConn returns a raw network connection.
// This implements the syscall.Conn interface.
//func (c *UDPConn) SyscallConn() (syscall.RawConn, error) {
//	if !c.ok() {
//		return nil, syscall.EINVAL
//	}
//	return newRawConn(c.fd)
//}

// ReadFromUDP acts like ReadFrom but returns a UDPAddr.
requires c.mem()
requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures c.mem()
ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures 0 <= n && n <= len(b)
func (c *UDPConn) ReadFromUDP(b []byte) (n int, addr *UDPAddr, err error) // {
	// This function is designed to allow the caller to control the lifetime
	// of the returned *UDPAddr and thereby prevent an allocation.
	// See https://blog.filippo.io/efficient-go-apis-with-the-inliner/.
	// The real work is done by readFromUDP, below.
//	return c.readFromUDP(b, &UDPAddr{})
//}

// readFromUDP implements ReadFromUDP.
requires c.mem()
requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
requires addr.mem()
ensures c.mem()
ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures 0 <= retInt && retInt <= len(b)
func (c *UDPConn) readFromUDP(b []byte, addr *UDPAddr) (retInt int, *UDPAddr, error) // {
//	if !c.ok() {
//		return 0, nil, syscall.EINVAL
//	}
//	n, addr, err := c.readFrom(b, addr)
//	if err != nil {
//		err = &OpError{Op: "read", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
//	}
//	return n, addr, err
//}

// ReadFrom implements the PacketConn ReadFrom method.
requires c.mem()
requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures c.mem()
ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i])
ensures 0 <= retInt && retInt <= len(b)
func (c *UDPConn) ReadFrom(b []byte) (retInt int, Addr, error) // {
//	n, addr, err := c.readFromUDP(b, &UDPAddr{})
//	if addr == nil {
//		// Return Addr(nil), not Addr(*UDPConn(nil)).
//		return n, nil, err
//	}
//	return n, addr, err
//}

// ReadMsgUDP reads a message from c, copying the payload into b and
// the associated out-of-band data into oob. It returns the number of
// bytes copied into b, the number of bytes copied into oob, the flags
// that were set on the message and the source address of the message.
//func (c *UDPConn) ReadMsgUDP(b, oob []byte) (n, oobn, flags int, addr *UDPAddr, err error) {
//	if !c.ok() {
//		return 0, 0, 0, nil, syscall.EINVAL
//	}
//	n, oobn, flags, addr, err = c.readMsg(b, oob)
//	if err != nil {
//		err = &OpError{Op: "read", Net: c.fd.net, Source: c.fd.laddr, Addr: c.fd.raddr, Err: err}
//	}
//	return
//}

// WriteToUDP acts like WriteTo but takes a UDPAddr.
requires c.mem() && acc(addr.mem(), 1/1000)
requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
ensures c.mem() && acc(addr.mem(), 1/1000)
ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
func (c *UDPConn) WriteToUDP(b []byte, addr *UDPAddr) (int, error) // {
//	if !c.ok() {
//		return 0, syscall.EINVAL
//	}
//	n, err := c.writeTo(b, addr)
//	if err != nil {
//		err = &OpError{Op: "write", Net: c.fd.net, Source: c.fd.laddr, Addr: addr.opAddr(), Err: err}
//	}
//	return n, err
//}

// WriteTo implements the PacketConn WriteTo method.
requires c.mem() && acc(addr.mem(), 1/1000)
requires forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
ensures c.mem() && acc(addr.mem(), 1/1000)
ensures forall i int :: 0 <= i && i < len(b) ==> acc(&b[i], 1/1000)
func (c *UDPConn) WriteTo(b []byte, addr Addr) (int, error) // {
//	if !c.ok() {
//		return 0, syscall.EINVAL
//	}
//	a, ok := addr.(*UDPAddr)
//	if !ok {
//		return 0, &OpError{Op: "write", Net: c.fd.net, Source: c.fd.laddr, Addr: addr, Err: syscall.EINVAL}
//	}
//	n, err := c.writeTo(b, a)
//	if err != nil {
//		err = &OpError{Op: "write", Net: c.fd.net, Source: c.fd.laddr, Addr: a.opAddr(), Err: err}
//	}
//	return n, err
//}

// WriteMsgUDP writes a message to addr via c if c isn't connected, or
// to c's remote address if c is connected (in which case addr must be
// nil). The payload is copied from b and the associated out-of-band
// data is copied from oob. It returns the number of payload and
// out-of-band bytes written.
//func (c *UDPConn) WriteMsgUDP(b, oob []byte, addr *UDPAddr) (n, oobn int, err error) {
//	if !c.ok() {
//		return 0, 0, syscall.EINVAL
//	}
//	n, oobn, err = c.writeMsg(b, oob, addr)
//	if err != nil {
//		err = &OpError{Op: "write", Net: c.fd.net, Source: c.fd.laddr, Addr: addr.opAddr(), Err: err}
//	}
//	return
//}

// func newUDPConn(fd *netFD) *UDPConn { return &UDPConn{conn{fd}} }

// DialUDP acts like Dial for UDP networks.
//func DialUDP(network string, laddr, raddr *UDPAddr) (*UDPConn, error) {
//	switch network {
//	case "udp", "udp4", "udp6":
//	default:
//		return nil, &OpError{Op: "dial", Net: network, Source: laddr.opAddr(), Addr: raddr.opAddr(), Err: UnknownNetworkError(network)}
//	}
//	if raddr == nil {
//		return nil, &OpError{Op: "dial", Net: network, Source: laddr.opAddr(), Addr: nil, Err: errMissingAddress}
//	}
//	sd := &sysDialer{network: network, address: raddr.String()}
//	c, err := sd.dialUDP(context.Background(), laddr, raddr)
//	if err != nil {
//		return nil, &OpError{Op: "dial", Net: network, Source: laddr.opAddr(), Addr: raddr.opAddr(), Err: err}
//	}
//	return c, nil
//}

// ListenUDP acts like ListenPacket for UDP networks.
//func ListenUDP(network string, laddr *UDPAddr) (*UDPConn, error) {
//	switch network {
//	case "udp", "udp4", "udp6":
//	default:
//		return nil, &OpError{Op: "listen", Net: network, Source: nil, Addr: laddr.opAddr(), Err: UnknownNetworkError(network)}
//	}
//	if laddr == nil {
//		laddr = &UDPAddr{}
//	}
//	sl := &sysListener{network: network, address: laddr.String()}
//	c, err := sl.listenUDP(context.Background(), laddr)
//	if err != nil {
//		return nil, &OpError{Op: "listen", Net: network, Source: nil, Addr: laddr.opAddr(), Err: err}
//	}
//	return c, nil
//}

// ListenMulticastUDP acts like ListenPacket for UDP networks but
// takes a group address on a specific network interface.
//func ListenMulticastUDP(network string, ifi *Interface, gaddr *UDPAddr) (*UDPConn, error) {
//	switch network {
//	case "udp", "udp4", "udp6":
//	default:
//		return nil, &OpError{Op: "listen", Net: network, Source: nil, Addr: gaddr.opAddr(), Err: UnknownNetworkError(network)}
//	}
//	if gaddr == nil || gaddr.IP == nil {
//		return nil, &OpError{Op: "listen", Net: network, Source: nil, Addr: gaddr.opAddr(), Err: errMissingAddress}
//	}
//	sl := &sysListener{network: network, address: gaddr.String()}
//	c, err := sl.listenMulticastUDP(context.Background(), ifi, gaddr)
//	if err != nil {
//		return nil, &OpError{Op: "listen", Net: network, Source: nil, Addr: gaddr.opAddr(), Err: err}
//	}
//	return c, nil
//}
