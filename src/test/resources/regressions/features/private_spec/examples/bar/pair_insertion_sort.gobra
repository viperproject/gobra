// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

// VerifyThis'17 -- Challenge 1 (sortedness property only)

package pkg

ghost
pure func max (a int, b int) int {
  return a < b ? b : a
}

ghost
pure func min (a int, b int) int {
  return a < b ? a : b
}

ghost
requires forall i int :: 0 <= i && i < len(s) ==> acc(&s[i])
ensures len(s) == len(xs)
ensures forall i int :: 0 <= i && i < len(s) ==> s[i] == xs[i]
pure func toseq (s []int) (xs seq[int])

ghost
pure func sorted (xs seq[int]) (b bool) {
  return forall i,j int :: 0 <= i && i < j && j < len(xs) ==> xs[i] <= xs[j]
}

requires 0 <= i && i < len(s) - 1
requires forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
requires xs == toseq(s) && sorted(xs[:i])
ensures -1 <= j && j < i
ensures forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
ensures ys == toseq(s)
ensures forall k int :: 0 <= k && k <= j ==> ys[k] == xs[k]
ensures forall k int :: j < k && k < i ==> ys[k + 2] == xs[k]
ensures forall k int :: i + 2 <= k && k < len(s) ==> ys[k] == xs[k]
ensures sorted(ys[:j+1])
ensures ys[j + 2] == x
ensures sorted(ys[j+2:i+2])
ensures 0 <= j && j <= i ==> ys[j] <= ys[j + 2]
func inner1 (s []int, ghost xs seq[int], i int, x int) (ghost ys seq[int], j int) {
  ys = xs
  j = i - 1
  
  invariant -1 <= j && j < i
  invariant forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
  invariant ys == toseq(s)
  invariant forall k int :: 0 <= k && k <= j ==> ys[k] == xs[k]
  invariant forall k int :: j < k && k < i ==> ys[k + 2] == xs[k]
  invariant forall k int :: i + 2 <= k && k < len(s) ==> ys[k] == xs[k]
  invariant sorted(ys[:j+1])
  invariant 0 <= j && j + 1 < i ==> ys[j] <= ys[j + 3]
  invariant sorted(ys[j+3:i+2])
  invariant j < i - 1 ==> x < ys[j + 3]
  for 0 <= j && x < s[j] {
    s[j + 2] = s[j]
    ys = ys[j + 2 = ys[j]]
    j = j - 1
  }
  
  s[j + 2] = x
  ys = ys[j + 2 = x]
  return
}

requires 0 <= i && i < len(s) - 1
requires -1 <= l && l < i
requires forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
requires xs == toseq(s) && sorted(xs[:l+1]) && sorted(xs[l+2:i+2])
requires 0 <= l && l <= i ==> xs[l] <= xs[l + 2]
requires y <= xs[l + 2]
ensures forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
ensures ys == toseq(s)
ensures -1 <= j && j <= l
ensures forall k int :: 0 <= k && k <= j ==> ys[k] == xs[k]
ensures ys[j + 1] == y
ensures forall k int :: j < k && k <= l ==> ys[k + 1] == xs[k]
ensures forall k int :: l + 1 < k && k < len(s) ==> ys[k] == xs[k]
ensures sorted(ys[:i+2])
func inner2 (s []int, ghost xs seq[int], i int, l int, y int) (ghost ys seq[int], j int) {
  j = l
  ys = xs
  
  invariant -1 <= j && j <= l
  invariant forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
  invariant ys == toseq(s)
  invariant forall k int :: 0 <= k && k <= j ==> ys[k] == xs[k]
  invariant forall k int :: j < k && k <= l ==> ys[k + 1] == xs[k]
  invariant forall k int :: l + 1 < k && k < len(s) ==> ys[k] == xs[k]
  invariant sorted(ys[:j+1])
  invariant 0 <= j && j <= l ==> ys[j] <= ys[j + 2]
  invariant sorted(ys[j+2:i+2])
  invariant j <= l ==> y <= ys[j + 2]
  for 0 <= j && y < s[j] {
    s[j + 1] = s[j]
    ys = ys[j + 1 = ys[j]]
    j = j - 1
  }
 
  s[j + 1] = y
  ys = ys[j + 1 = y]
  return
}

requires forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
requires xs == toseq(s) && 0 < len(xs)
requires sorted(xs[:len(xs)-1])
ensures forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
ensures ys == toseq(s)
ensures -1 <= j && j < len(s) - 1
ensures forall k int :: 0 <= k && k < j + 1 ==> ys[k] == xs[k]
ensures ys[j + 1] == xs[len(xs) - 1]
ensures forall k int :: j + 1 <= k && k < len(ys) - 1 ==> ys[k + 1] == xs[k]
ensures sorted(ys)
func inner3 (s []int, ghost xs seq[int]) (ghost ys seq[int], j int) {
  y := s[len(s) - 1]
  ys = xs
  j = len(s) - 2
  
  invariant -1 <= j && j < len(s) - 1
  invariant forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
  invariant ys == toseq(s)
  invariant forall k int :: 0 <= k && k <= j ==> ys[k] == xs[k]
  invariant forall k int :: j < k && k < len(s) - 1 ==> ys[k + 1] == xs[k]
  invariant sorted(ys[:j+1])
  invariant 0 <= j && j + 1 < len(s) - 1 ==> ys[j] <= ys[j + 2]
  invariant sorted(ys[j+2:])
  invariant j + 1 < len(s) - 1 ==> y <= ys[j + 2]
  for 0 <= j && y < s[j] {
    s[j + 1] = s[j]
    ys = ys[j + 1 = ys[j]]
    j = j - 1
  }
  
  s[j + 1] = y
  ys = ys[j + 1 = y]
  return
} 
  
requires forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
requires xs == toseq(s)
ensures forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
ensures ys == toseq(s)
ensures sorted(ys)
func sort (s []int, ghost xs seq[int]) (ghost ys seq[int]) {
  ys = toseq(s)
	i := 0

  invariant 0 <= i && i <= len(s)
  invariant forall k int :: 0 <= k && k < len(s) ==> acc(&s[k])
  invariant ys == toseq(s)
  invariant ys[i:] == xs[i:]
  invariant sorted(ys[:i])
	for i < len(s) - 1 {
    x := s[i]
    y := s[i + 1]

    if x < y {
      tmp := x
      x = y
      y = tmp
    }
  
    assert x == max(s[i], s[i + 1])
    assert y == min(s[i], s[i + 1])
   
    var j int
    ys, j = inner1(s, ys, i, x)
    ys, j = inner2(s, ys, i, j, y)
  
    i = i + 2
	}
  
  if (i == len(s) - 1) {
    var j int
    ys, j = inner3(s, ys)
  }
  return
}
