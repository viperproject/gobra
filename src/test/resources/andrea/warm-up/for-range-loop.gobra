preserves acc(x)
requires len(x) > 0
ensures forall i int :: 0 <= i && i < len(x) ==> max >= x[i]
decreases
func foo(x []uint) (max uint) {
	max = x[0]
	invariant acc(x)
	invariant 0 <= i && i <= len(x)
	invariant forall k int :: 0 <= k && k < i0 ==> max >= x[k]
	decreases len(x) - i0
	for i, j := range x with i0 {
		if j > max {
			max = j
		}
	}
}

preserves acc(x)
requires len(x) > 0
ensures forall i int :: 0 <= i && i < len(x) ==> max >= x[i]
decreases
func foo2(x []uint) (max uint) {
	max = x[0]
	invariant acc(x)
	invariant 0 <= i && i <= len(x)
	invariant forall k int :: 0 <= k && k < i ==> max >= x[k]
	decreases len(x) - i
	for i := 0; i < len(x); i++ {
	    j := x[i]
		if j > max {
			max = j
		}
	}
}