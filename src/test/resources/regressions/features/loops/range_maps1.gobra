// Any copyright is dedicated to the Public Domain.
// http://creativecommons.org/publicdomain/zero/1.0/

package pkg


requires acc(x)
requires len(x) > 0
ensures acc(x)
ensures forall k uint :: k in domain(x) ==> max >= k
decreases
func foo(x map[uint]int) (max uint) {
	max = 0
	invariant acc(x)
	invariant forall i uint :: i in visited ==> max >= i
	decreases len(domain(x)) - len(visited)
	for k, v := range x with visited {
		if k > max {
			max = k
		}
	}
}

decreases
func bar() {
	x := map[uint]int{1:1, 2:2, 3:3}
	m := foo(x)
	assert forall i uint :: i in domain(x) ==> m >= i
}

requires acc(x)
requires len(x) > 0
ensures acc(x)
ensures forall k int :: k in domain(x) ==> max >= x[k]
decreases
func foo1(x map[int]uint) (max uint) {
	max = 0
	var k int
	var v uint
	invariant acc(x)
	invariant forall i int :: i in visited ==> max >= x[i]
	decreases len(domain(x)) - len(visited)
	for k, v = range x with visited {
		if v > max {
			max = v
		}
	}
}

decreases
func bar1() {
	x := map[int]uint{1:1, 2:2, 3:3}
	m := foo1(x)
	assert forall i int :: i in domain(x) ==> m >= x[i]
}
